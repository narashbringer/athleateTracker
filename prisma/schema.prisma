// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  schoolId      String? 
  school        school?   @relation(fields: [schoolId], references: [id])
  teams         team[] 
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model school {
  id        String   @id @default(cuid())
  name      String
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
  students  student[]
  teams     team[]
}

model team {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users    User[]
  students  student[]
  schoolId  String
  school    school   @relation(fields: [schoolId], references: [id])
}

model student {
  id        String   @id @default(cuid())
  first_name      String
  last_name      String
  email     String
  schoolId  String
  gpa     Float
  major    String
  minor    String
  progress_towards_degree Float
  seasons_remaining Int
  medically_eligible Boolean
  academically_eligible Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  school    school   @relation(fields: [schoolId], references: [id])
  teams      team[]  
  classes   classes[]
  documents document[]
  emergencyContact emergencyContact[]
  caraHours caraHours[]
  caraEvents caraEvents[]
  positions position[]
}

model position {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String
  student   student  @relation(fields: [studentId], references: [id])
}
model document {
  id        String   @id @default(cuid())
  name      String
  type      String
  signed    Boolean 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String
  student   student  @relation(fields: [studentId], references: [id])
}

model classes {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  students  student[]
}

model emergencyContact {
  id        String   @id @default(cuid())
  name      String
  relationship String 
  email     String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String
  student   student  @relation(fields: [studentId], references: [id])
}

model caraHours {
  id        String   @id @default(cuid())
  name      String
  week      String
  Totalhours  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String
  student   student  @relation(fields: [studentId], references: [id])
  caraEvents caraEvents[]
}

model caraEvents {
  id        String   @id @default(cuid())
  name      String
  date      DateTime
  hours     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String
  student   student  @relation(fields: [studentId], references: [id])
  caraId    String
  caraHours   caraHours  @relation(fields: [studentId], references: [id])
}