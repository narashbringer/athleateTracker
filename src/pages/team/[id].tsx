import { type NextPage } from "next";
import Head from "next/head";

import { useSession } from "next-auth/react";
import { useRouter } from "next/router";
import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { trpc } from "../../utils/trpc";
import Link from "next/link";
import AddEC from "../components/addEC";

const TeamDetails: NextPage = () => {
    const { data: sessionData } = useSession();
    const [modalOpen, setModalOpen] = useState(false)
    const router  = useRouter()
    const context = trpc.useContext()
    const { id } = router.query
    const { data: teamData, } = trpc.team.getById.useQuery({id: id && typeof id === "string" ? id : ""},
        { enabled: sessionData?.user !== undefined },
        )
    const  addPlayer = trpc.students.create.useMutation()
    const { handleSubmit, register } = useForm()
    const onCreateAthlete = handleSubmit((e) => {
        let ids = ""
        if (id && typeof id === "string"){
            ids = id
        }
        const x = addPlayer.mutate(
            {first_name: e.first_name,
             last_name: e.last_name,
             email: e.email,
             gpa: e.gpa,
             major: e.major,
             minor: e.minor,
             progress_towards_degree: e.progress_towards_degree,
             seasons_remaining: e.seasons_remaining,
             medically_eligible: e.medically_eligible,
             academically_eligible: e.academically_eligible,
             positions: [e.positions],
             teamIds: [ids], 
             schoolId: String(teamData?.schoolId || ""),
            }

        )
        // router.push(`/team/${teamCreater.data?.id}}`)
    });


    const {data: usersTeams } = trpc.team.getStudents.useQuery( 
        {id:id}, // no input
        { enabled: sessionData?.user !== undefined },
        )

    const toggleModal = () => {
        setModalOpen(!modalOpen)
    }

    return (<>
        <Head>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className=" float-left  flex flex-row py-4">
        <h1 className="text-2xl font-extrabold text-white sm:text-[5rem]">Team {teamData?.name} Details: </h1>
        </div>
        <button 
        className="
        w-1/2 md:w-1/4 mx-auto justify-right
         text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
        type="button" 
        onClick={toggleModal}
        data-modal-toggle="athlete-modal">
        add  new student Athleate
        </button>

        <div 
        id="athlete-modal" 
        aria-hidden="true" 
        tabIndex={-1} 
        className={`fixed top-0 mx-auto justify-center items-center z-50 ${!modalOpen? "hidden": ""} w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-modal md:h-full`}>
            <div className="relative w-full h-full max-w-md md:h-auto">
                <div className="relative bg-white rounded-lg shadow dark:bg-gray-700">
                    <button type="button" 
                    onClick={toggleModal}
                    className="absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-800 dark:hover:text-white" data-modal-toggle="authentication-modal">
                        <svg aria-hidden="true" className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd"></path></svg>
                        <span className="sr-only">Close modal</span>
                    </button>
                    <div className="px-6 py-6 lg:px-8 ">
                        <h3 className="mb-4 text-xl font-medium text-gray-900 dark:text-white">Add Student</h3>
                        <form className="space-y-3" onSubmit={onCreateAthlete}>
                            <div className="flex flex-row gap-2">
                                <div>
                                <label htmlFor="first_name" className="block text-sm font-medium text-gray-700 dark:text-gray-200">First Name</label>
                                <input type="text" {...register("first_name", { required: true })} id="first_name" className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:placeholder-gray-500 dark:focus:ring-blue-400 dark:focus:border-blue-400"/>
                                </div>
                                <div>
                                <label htmlFor="last_name" className="block text-sm font-medium text-gray-700 dark:text-gray-200">Last Name</label>
                                <input type="text" {...register("last_name", { required: true })} id="last_name" className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:placeholder-gray-500 dark:focus:ring-blue-400 dark:focus:border-blue-400"/>
                                </div>
                            </div>
                            <div className=" flex flex-row gap-2">
                                <div>
                                <label htmlFor="email" className="block text-sm font-medium text-gray-700 dark:text-gray-200">Email</label>
                                <input type="text" {...register("email", { required: true })} id="email" className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:placeholder-gray-500 dark:focus:ring-blue-400 dark:focus:border-blue-400"/>
                            </div>
                            <div >
                                <label htmlFor="gpa" className="block text-sm font-medium text-gray-700 dark:text-gray-200">GPA</label>
                                <input type="number" step={0.01} {...register("gpa", { required: true })} id="gpa" className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:placeholder-gray-500 dark:focus:ring-blue-400 dark:focus:border-blue-400"/>
                                </div>
                            </div>
                            <div  className=" flex flex-row gap-2">
                            <div >
                                <label htmlFor="major" className="block text-sm font-medium text-gray-700 dark:text-gray-200">Major</label>
                                <input type="text" {...register("major", { required: true })} id="major" className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:placeholder-gray-500 dark:focus:ring-blue-400 dark:focus:border-blue-400"/>
                            </div>
                            
                            <div >
                                <label htmlFor="minor" className="block text-sm font-medium text-gray-700 dark:text-gray-200">Minor</label>
                                <input type="text" {...register("minor", { required: true })} id="major" className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:placeholder-gray-500 dark:focus:ring-blue-400 dark:focus:border-blue-400"/>
                            </div>
                            </div>
                            <div  className=" flex flex-row gap-2">
                            <div >
                                <label htmlFor="progress_towards_degree" className="block text-sm font-medium text-gray-700 dark:text-gray-200">Progress Towards Degree</label>
                                <input type="number" step={0.01} {...register("progress_towards_degree", { required: true })} id="progress_towards_degree" className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:placeholder-gray-500 dark:focus:ring-blue-400 dark:focus:border-blue-400"/>
                            </div>
                            <div >
                                <label htmlFor="positions" className="block text-sm font-medium text-gray-700 dark:text-gray-200">Position</label>
                                <input {...register("positions", { required: true })} id="positions" className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:placeholder-gray-500 dark:focus:ring-blue-400 dark:focus:border-blue-400"/>
                            </div>
                            </div>
                            <div  className=" flex flex-row gap-2">
                            <div >
                                <label htmlFor="seasons_remaining" className="block text-sm font-medium text-gray-700 dark:text-gray-200">Seasons Remaining</label>
                                <input type="number" {...register("seasons_remaining", { required: true })} id="seasons_remaining" className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:placeholder-gray-500 dark:focus:ring-blue-400 dark:focus:border-blue-400"/>
                            </div>
                            </div>
                            <div className="flex flex-row gap-2">
                            <div>
                                <label htmlFor="medically_eligible" className="block text-sm font-medium text-gray-700 dark:text-gray-200">Medically Eligible</label>
                                <input type="checkBox" {...register("medically_eligible", )} defaultChecked={false} id="medically_eligible" className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:placeholder-gray-500 dark:focus:ring-blue-400 dark:focus:border-blue-400"/>
                            </div>
                            <div>
                                <label htmlFor="academically_eligible" className="block text-sm font-medium text-gray-700 dark:text-gray-200">Academically Eligible</label>
                                <input type="checkBox"  {...register("academically_eligible", )} defaultChecked={false} id="academically_eligible" className="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:placeholder-gray-500 dark:focus:ring-blue-400 dark:focus:border-blue-400" />
                            </div>
                            </div>
                            <div className="space-y-1"> 
                                <button type="submit" className="flex justify-center w-full px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                submit
                             </button>
                            </div>                                   
                        </form>
                    </div>
                </div>
            </div>
        </div> 

            <table className="table-auto">
                <thead>
                <tr >
                    <th className=" items-center justify-center gap-1 px-2 py-3 bg-white/10 rounded-xl transition text-white hover:bg-white/20"> Names
                    </th>
                    <th 
                    className="items-center justify-center gap-1 px-2 py-3 bg-white/10 rounded-xl transition text-white hover:bg-white/20">
                        medically eligible</th>
                        <th
                    className="items-center justify-center gap-1 px-2 py-3 bg-white/10 rounded-xl transition text-white hover:bg-white/20">
                        academically eligible</th>
                    <th 
                    className="items-center justify-center gap-1 px-2 py-3 bg-white/10 rounded-xl transition text-white hover:bg-white/20">
                    add EC</th>
                </tr>

                </thead>
                <tbody>
                {usersTeams &&usersTeams.students.map(student => {
                    return(     
                        <tr key={student.id}>
                    <td className="text-2xl font-semibold text-white">
                    <Link href={`/student/${student.id}`} key={student.id} className="flex flex-col items-center justify-center gap-2 px-2 py-3 bg-white/10 rounded-xl transition hover:bg-white/20">
{
                    student.first_name + " " + student.last_name}
                    </Link>
                    </td>
                    <td className="text-2xl font-semibold">
                    <Link href={`/student/${student.id}`} key={student.id} 
                    className={`flex flex-col items-center justify-center ${!student.medically_eligible ? "text-red" :"text-white"} gap-2 px-2 py-3 bg-white/10 rounded-xl transition hover:bg-white/20`}>

                    {student.medically_eligible ? "medically eligible" : "medically ineligible"}
                    </Link>
                    </td>
                    <td className="text-2xl font-semibold">
                    <Link href={`/student/${student.id}`} key={student.id}
                    className={`flex flex-col items-center justify-center ${!student.academically_eligible ? "text-red-600" :"text-white"} gap-2 px-2 py-3 bg-white/10 rounded-xl transition hover:bg-white/20`}>
                    {student.academically_eligible ? "academically eligible" : "academically ineligible"}
                    </Link>
                    </td>
                    <td className="text-2xl font-semibold">
                    {student.caraHours && student.caraHours.length > 0 &&
                    student.caraHours.sort((a,b) => {if(a.week > b.week) return 1
                    if(a.week < b.week) return -1
                    if(a.week === b.week) return 0
                    })[-1]?.Totalhours &&
                    student.caraHours.sort((a,b) => {if(a.week > b.week) return 1;
                    if(a.week < b.week) return -1;
                    if(a.week === b.week) return 0;
                    })[-1]?.Totalhours  > 20

                ?   
                        <Link href={`/student/${student.id}`} key={student.id} className={`flex flex-col items-center justify-center text-red-600 gap-2 px-2 py-3 bg-white/10 rounded-xl transition hover:bg-white/20`}>
                            y[-1] ? y[-1].hours : 0
                    </Link>:<Link href={`/student/${student.id}`} key={student.id} className={`flex flex-col items-center justify-center text-white gap-2 px-2 py-3 bg-white/10 rounded-xl transition hover:bg-white/20`}>
                        {student.caraHours.sort((a,b) => {if(a.week > b.week) return 1 
                        if(a.week < b.week) return -1;
                        if(a.week === b.week) return 0;})[-1]?.Totalhours || 0}
                    </Link>
                    }
                    </td>
                    <td>
                    <AddEC
            studentId={student.id}
            />
        </td>
                    </tr>
)
                })}
                                    </tbody>

                </table>
        </main>
        </>
    );
}

export default TeamDetails;