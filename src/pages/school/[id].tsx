import { type NextPage } from "next";
import Head from "next/head";

import { useSession } from "next-auth/react";
import { useRouter } from "next/router";
import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { trpc } from "../../utils/trpc";
import Link from "next/link";

const SchoolDetails: NextPage = () => {
    const { data: sessionData } = useSession();
    const router  = useRouter()
    const context = trpc.useContext()
    const { id } = router.query
    const { data: schoolData, } = trpc.schools.getSchoolById.useQuery({id: id && typeof id === "string" ? id : ""},
        { enabled: sessionData?.user !== undefined },
        )
    const  teamCreater = trpc.team.create.useMutation()
    const { handleSubmit, register } = useForm()
    const onCreateTeam = handleSubmit((e) => {
        let ids = ""
        if (id && typeof id === "string"){
            ids = id
        }
        const x = teamCreater.mutate(
            {name: e.teamName, 
                schoolId: ids, userId: sessionData?.user?.id || ""},
            { onSuccess: (data) => {
                console.log("success", data)
                router.push(`/team/${data?.id.trim()}`)

            }}
        )
       
    });
    const {data: usersTeams } = trpc.team.getUsersTeams.useQuery( 
        undefined, // no input
        { enabled: sessionData?.user !== undefined },
        )

    return (<>
        <Head>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className=" float-left  flex flex-row py-4">
        <h1 className="text-2xl font-extrabold text-white sm:text-[5rem]">{schoolData?.name} Details: </h1>
        </div>
        <div className="grid grid-cols-4 gap-2 py-4">
            <div className="grid-span-1">
            <form onSubmit={onCreateTeam}  className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-black"
>
            <label htmlFor="teamName" className="text-2xl font-bold text-white">Team Name</label>
            <input type="text" {...register("teamName", { required: true })} id="teamName" className="rounded-lg"/>
            <button type="submit" className="hover:bg-white/20 rounded-lg text-white">Create team</button>
        </form>
        </div>
            <table className="grid-span-3 table-auto">
                <thead>
                <tr>
                    <th className="flex flex-col items-center justify-center gap-1 px-2 py-3 bg-white/10 rounded-xl transition text-white hover:bg-white/20"> Names
                    </th>
                </tr>
                </thead>
                <tbody>
                {usersTeams &&usersTeams?.teams.map(team => {
                    return(     
                        <tr key={team.id}>
                    <td className="text-2xl font-semibold text-white">
                    <Link href={`/team/${team.id}`} key={team.id} className="flex flex-col items-center justify-center gap-2 px-2 py-3 bg-white/10 rounded-xl transition hover:bg-white/20">
{
                    team.name}
                    </Link>
                    </td>
                    </tr>
)
                })}
                                    </tbody>

                </table>
        </div>
        </main>
        </>
    );
}

export default SchoolDetails;